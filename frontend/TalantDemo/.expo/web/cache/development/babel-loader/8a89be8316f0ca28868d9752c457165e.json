{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\darya\\\\Documents\\\\TalantDemo\\\\src\\\\SignIn.js\";\n\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport AsyncStorage from '@react-native-community/async-storage';\nimport Loader from \"./Components/loader\";\n\nvar LoginScreen = function LoginScreen(props) {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      userEmail = _useState2[0],\n      setUserEmail = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      userPassword = _useState4[0],\n      setUserPassword = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loading = _useState6[0],\n      setLoading = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      errortext = _useState8[0],\n      setErrortext = _useState8[1];\n\n  var handleSubmitPress = function handleSubmitPress() {\n    setErrortext('');\n\n    if (!userEmail) {\n      alert('Please fill Email');\n      return;\n    }\n\n    if (!userPassword) {\n      alert('Please fill Password');\n      return;\n    }\n\n    setLoading(true);\n    var dataToSend = {\n      user_email: userEmail,\n      user_password: userPassword\n    };\n    var formBody = [];\n\n    for (var key in dataToSend) {\n      var encodedKey = encodeURIComponent(key);\n      var encodedValue = encodeURIComponent(dataToSend[key]);\n      formBody.push(encodedKey + '=' + encodedValue);\n    }\n\n    formBody = formBody.join('&');\n    fetch('https://aboutreact.herokuapp.com/login.php', {\n      method: 'POST',\n      body: formBody,\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (responseJson) {\n      setLoading(false);\n      console.log(responseJson);\n\n      if (responseJson.status == 1) {\n        AsyncStorage.setItem('user_id', responseJson.data[0].user_id);\n        console.log(responseJson.data[0].user_id);\n        props.navigation.navigate('DrawerNavigationRoutes');\n      } else {\n        setErrortext('Please check your email id or password');\n        console.log('Please check your email id or password');\n      }\n    }).catch(function (error) {\n      setLoading(false);\n      console.error(error);\n    });\n  };\n\n  return React.createElement(View, {\n    style: styles.mainBody,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, React.createElement(Loader, {\n    loading: loading,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }), React.createElement(ScrollView, {\n    keyboardShouldPersistTaps: \"handled\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }, React.createElement(View, {\n    style: {\n      marginTop: 100\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }\n  }, React.createElement(KeyboardAvoidingView, {\n    enabled: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 21\n    }\n  }, React.createElement(View, {\n    style: {\n      alignItems: 'center'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 25\n    }\n  }, React.createElement(Image, {\n    source: require(\"../Image/aboutreact.png\"),\n    style: {\n      width: '50%',\n      height: 100,\n      resizeMode: 'contain',\n      margin: 30\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 29\n    }\n  })), React.createElement(View, {\n    style: styles.SectionStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 25\n    }\n  }, React.createElement(TextInput, {\n    style: styles.inputStyle,\n    onChangeText: function onChangeText(UserEmail) {\n      return setUserEmail(UserEmail);\n    },\n    underlineColorAndroid: \"#FFFFFF\",\n    placeholder: \"Enter Email\",\n    placeholderTextColor: \"#F6F6F7\",\n    autoCapitalize: \"none\",\n    keyboardType: \"email-address\",\n    ref: function ref(_ref) {\n      _this._emailinput = _ref;\n    },\n    returnKeyType: \"next\",\n    onSubmitEditing: function onSubmitEditing() {\n      return _this._passwordinput && _this._passwordinput.focus();\n    },\n    blurOnSubmit: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 29\n    }\n  })), React.createElement(View, {\n    style: styles.SectionStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 25\n    }\n  }, React.createElement(TextInput, {\n    style: styles.inputStyle,\n    onChangeText: function onChangeText(UserPassword) {\n      return setUserPassword(UserPassword);\n    },\n    underlineColorAndroid: \"#FFFFFF\",\n    placeholder: \"Enter Password\",\n    placeholderTextColor: \"#F6F6F7\",\n    keyboardType: \"default\",\n    ref: function ref(_ref2) {\n      _this._passwordinput = _ref2;\n    },\n    onSubmitEditing: Keyboard.dismiss,\n    blurOnSubmit: false,\n    secureTextEntry: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 29\n    }\n  })), errortext != '' ? React.createElement(Text, {\n    style: styles.errorTextStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 29\n    }\n  }, \" \", errortext, \" \") : null, React.createElement(TouchableOpacity, {\n    style: styles.buttonStyle,\n    activeOpacity: 0.5,\n    onPress: handleSubmitPress,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 25\n    }\n  }, React.createElement(Text, {\n    style: styles.buttonTextStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 29\n    }\n  }, \"LOGIN\")), React.createElement(Text, {\n    style: styles.registerTextStyle,\n    onPress: function onPress() {\n      return props.navigation.navigate('RegisterScreen');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 25\n    }\n  }, \"New Here ? Register\")))));\n};\n\nexport default LoginScreen;\nvar styles = StyleSheet.create({\n  mainBody: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#307ecc'\n  },\n  SectionStyle: {\n    flexDirection: 'row',\n    height: 40,\n    marginTop: 20,\n    marginLeft: 35,\n    marginRight: 35,\n    margin: 10\n  },\n  buttonStyle: {\n    backgroundColor: '#7DE24E',\n    borderWidth: 0,\n    color: '#FFFFFF',\n    borderColor: '#7DE24E',\n    height: 40,\n    alignItems: 'center',\n    borderRadius: 30,\n    marginLeft: 35,\n    marginRight: 35,\n    marginTop: 20,\n    marginBottom: 20\n  },\n  buttonTextStyle: {\n    color: '#FFFFFF',\n    paddingVertical: 10,\n    fontSize: 16\n  },\n  inputStyle: {\n    flex: 1,\n    color: 'white',\n    paddingLeft: 15,\n    paddingRight: 15,\n    borderWidth: 1,\n    borderRadius: 30,\n    borderColor: 'white'\n  },\n  registerTextStyle: {\n    color: '#FFFFFF',\n    textAlign: 'center',\n    fontWeight: 'bold',\n    fontSize: 14\n  },\n  errorTextStyle: {\n    color: 'red',\n    textAlign: 'center',\n    fontSize: 14\n  }\n});","map":{"version":3,"sources":["C:/Users/darya/Documents/TalantDemo/src/SignIn.js"],"names":["React","useState","AsyncStorage","Loader","LoginScreen","props","userEmail","setUserEmail","userPassword","setUserPassword","loading","setLoading","errortext","setErrortext","handleSubmitPress","alert","dataToSend","user_email","user_password","formBody","key","encodedKey","encodeURIComponent","encodedValue","push","join","fetch","method","body","headers","then","response","json","responseJson","console","log","status","setItem","data","user_id","navigation","navigate","catch","error","styles","mainBody","marginTop","alignItems","require","width","height","resizeMode","margin","SectionStyle","inputStyle","UserEmail","ref","_emailinput","_passwordinput","focus","UserPassword","Keyboard","dismiss","errorTextStyle","buttonStyle","buttonTextStyle","registerTextStyle","StyleSheet","create","flex","justifyContent","backgroundColor","flexDirection","marginLeft","marginRight","borderWidth","color","borderColor","borderRadius","marginBottom","paddingVertical","fontSize","paddingLeft","paddingRight","textAlign","fontWeight"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;;;;;;;AAcA,OAAOC,YAAP,MAAyB,uCAAzB;AACA,OAAOC,MAAP;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAC,KAAK,EAAI;AAAA,kBACOJ,QAAQ,CAAC,EAAD,CADf;AAAA;AAAA,MACpBK,SADoB;AAAA,MACTC,YADS;;AAAA,mBAEaN,QAAQ,CAAC,EAAD,CAFrB;AAAA;AAAA,MAEpBO,YAFoB;AAAA,MAENC,eAFM;;AAAA,mBAGGR,QAAQ,CAAC,KAAD,CAHX;AAAA;AAAA,MAGpBS,OAHoB;AAAA,MAGXC,UAHW;;AAAA,mBAIOV,QAAQ,CAAC,EAAD,CAJf;AAAA;AAAA,MAIpBW,SAJoB;AAAA,MAITC,YAJS;;AAMzB,MAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC5BD,IAAAA,YAAY,CAAC,EAAD,CAAZ;;AACA,QAAI,CAACP,SAAL,EAAgB;AACZS,MAAAA,KAAK,CAAC,mBAAD,CAAL;AACA;AACH;;AACD,QAAI,CAACP,YAAL,EAAmB;AACfO,MAAAA,KAAK,CAAC,sBAAD,CAAL;AACA;AACH;;AACDJ,IAAAA,UAAU,CAAC,IAAD,CAAV;AACA,QAAIK,UAAU,GAAG;AAAEC,MAAAA,UAAU,EAAEX,SAAd;AAAyBY,MAAAA,aAAa,EAAEV;AAAxC,KAAjB;AACA,QAAIW,QAAQ,GAAG,EAAf;;AACA,SAAK,IAAIC,GAAT,IAAgBJ,UAAhB,EAA4B;AACxB,UAAIK,UAAU,GAAGC,kBAAkB,CAACF,GAAD,CAAnC;AACA,UAAIG,YAAY,GAAGD,kBAAkB,CAACN,UAAU,CAACI,GAAD,CAAX,CAArC;AACAD,MAAAA,QAAQ,CAACK,IAAT,CAAcH,UAAU,GAAG,GAAb,GAAmBE,YAAjC;AACH;;AACDJ,IAAAA,QAAQ,GAAGA,QAAQ,CAACM,IAAT,CAAc,GAAd,CAAX;AAEAC,IAAAA,KAAK,CAAC,4CAAD,EAA+C;AAChDC,MAAAA,MAAM,EAAE,MADwC;AAEhDC,MAAAA,IAAI,EAAET,QAF0C;AAGhDU,MAAAA,OAAO,EAAE;AAEL,wBAAgB;AAFX;AAHuC,KAA/C,CAAL,CAOGC,IAPH,CAOQ,UAAAC,QAAQ;AAAA,aAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,KAPhB,EAQKF,IARL,CAQU,UAAAG,YAAY,EAAI;AAElBtB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAuB,MAAAA,OAAO,CAACC,GAAR,CAAYF,YAAZ;;AAEA,UAAIA,YAAY,CAACG,MAAb,IAAuB,CAA3B,EAA8B;AAC1BlC,QAAAA,YAAY,CAACmC,OAAb,CAAqB,SAArB,EAAgCJ,YAAY,CAACK,IAAb,CAAkB,CAAlB,EAAqBC,OAArD;AACAL,QAAAA,OAAO,CAACC,GAAR,CAAYF,YAAY,CAACK,IAAb,CAAkB,CAAlB,EAAqBC,OAAjC;AACAlC,QAAAA,KAAK,CAACmC,UAAN,CAAiBC,QAAjB,CAA0B,wBAA1B;AACH,OAJD,MAIO;AACH5B,QAAAA,YAAY,CAAC,wCAAD,CAAZ;AACAqB,QAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ;AACH;AACJ,KArBL,EAsBKO,KAtBL,CAsBW,UAAAC,KAAK,EAAI;AAEZhC,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAuB,MAAAA,OAAO,CAACS,KAAR,CAAcA,KAAd;AACH,KA1BL;AA2BH,GA/CD;;AAiDA,SACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEnC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,oBAAC,UAAD;AAAY,IAAA,yBAAyB,EAAC,SAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEoC,MAAAA,SAAS,EAAE;AAAb,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,oBAAD;AAAsB,IAAA,OAAO,MAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEC,MAAAA,UAAU,EAAE;AAAd,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,KAAD;AACI,IAAA,MAAM,EAAEC,OAAO,2BADnB;AAEI,IAAA,KAAK,EAAE;AACHC,MAAAA,KAAK,EAAE,KADJ;AAEHC,MAAAA,MAAM,EAAE,GAFL;AAGHC,MAAAA,UAAU,EAAE,SAHT;AAIHC,MAAAA,MAAM,EAAE;AAJL,KAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,EAYI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAER,MAAM,CAACS,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,SAAD;AACI,IAAA,KAAK,EAAET,MAAM,CAACU,UADlB;AAEI,IAAA,YAAY,EAAE,sBAAAC,SAAS;AAAA,aAAIhD,YAAY,CAACgD,SAAD,CAAhB;AAAA,KAF3B;AAGI,IAAA,qBAAqB,EAAC,SAH1B;AAII,IAAA,WAAW,EAAC,aAJhB;AAKI,IAAA,oBAAoB,EAAC,SALzB;AAMI,IAAA,cAAc,EAAC,MANnB;AAOI,IAAA,YAAY,EAAC,eAPjB;AAQI,IAAA,GAAG,EAAE,aAAAC,IAAG,EAAI;AACR,MAAA,KAAI,CAACC,WAAL,GAAmBD,IAAnB;AACH,KAVL;AAWI,IAAA,aAAa,EAAC,MAXlB;AAYI,IAAA,eAAe,EAAE;AAAA,aACb,KAAI,CAACE,cAAL,IAAuB,KAAI,CAACA,cAAL,CAAoBC,KAApB,EADV;AAAA,KAZrB;AAeI,IAAA,YAAY,EAAE,KAflB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAZJ,EA+BI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEf,MAAM,CAACS,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,SAAD;AACI,IAAA,KAAK,EAAET,MAAM,CAACU,UADlB;AAEI,IAAA,YAAY,EAAE,sBAAAM,YAAY;AAAA,aAAInD,eAAe,CAACmD,YAAD,CAAnB;AAAA,KAF9B;AAGI,IAAA,qBAAqB,EAAC,SAH1B;AAII,IAAA,WAAW,EAAC,gBAJhB;AAKI,IAAA,oBAAoB,EAAC,SALzB;AAMI,IAAA,YAAY,EAAC,SANjB;AAOI,IAAA,GAAG,EAAE,aAAAJ,KAAG,EAAI;AACR,MAAA,KAAI,CAACE,cAAL,GAAsBF,KAAtB;AACH,KATL;AAUI,IAAA,eAAe,EAAEK,QAAQ,CAACC,OAV9B;AAWI,IAAA,YAAY,EAAE,KAXlB;AAYI,IAAA,eAAe,EAAE,IAZrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CA/BJ,EA+CKlD,SAAS,IAAI,EAAb,GACG,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEgC,MAAM,CAACmB,cAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAsCnD,SAAtC,MADH,GAEG,IAjDR,EAkDI,oBAAC,gBAAD;AACI,IAAA,KAAK,EAAEgC,MAAM,CAACoB,WADlB;AAEI,IAAA,aAAa,EAAE,GAFnB;AAGI,IAAA,OAAO,EAAElD,iBAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAII,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE8B,MAAM,CAACqB,eAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAJJ,CAlDJ,EAwDI,oBAAC,IAAD;AACI,IAAA,KAAK,EAAErB,MAAM,CAACsB,iBADlB;AAEI,IAAA,OAAO,EAAE;AAAA,aAAM7D,KAAK,CAACmC,UAAN,CAAiBC,QAAjB,CAA0B,gBAA1B,CAAN;AAAA,KAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAxDJ,CADJ,CADJ,CAFJ,CADJ;AAuEH,CA9HD;;AA+HA,eAAerC,WAAf;AAEA,IAAMwC,MAAM,GAAGuB,UAAU,CAACC,MAAX,CAAkB;AAC7BvB,EAAAA,QAAQ,EAAE;AACNwB,IAAAA,IAAI,EAAE,CADA;AAENC,IAAAA,cAAc,EAAE,QAFV;AAGNC,IAAAA,eAAe,EAAE;AAHX,GADmB;AAM7BlB,EAAAA,YAAY,EAAE;AACVmB,IAAAA,aAAa,EAAE,KADL;AAEVtB,IAAAA,MAAM,EAAE,EAFE;AAGVJ,IAAAA,SAAS,EAAE,EAHD;AAIV2B,IAAAA,UAAU,EAAE,EAJF;AAKVC,IAAAA,WAAW,EAAE,EALH;AAMVtB,IAAAA,MAAM,EAAE;AANE,GANe;AAc7BY,EAAAA,WAAW,EAAE;AACTO,IAAAA,eAAe,EAAE,SADR;AAETI,IAAAA,WAAW,EAAE,CAFJ;AAGTC,IAAAA,KAAK,EAAE,SAHE;AAITC,IAAAA,WAAW,EAAE,SAJJ;AAKT3B,IAAAA,MAAM,EAAE,EALC;AAMTH,IAAAA,UAAU,EAAE,QANH;AAOT+B,IAAAA,YAAY,EAAE,EAPL;AAQTL,IAAAA,UAAU,EAAE,EARH;AASTC,IAAAA,WAAW,EAAE,EATJ;AAUT5B,IAAAA,SAAS,EAAE,EAVF;AAWTiC,IAAAA,YAAY,EAAE;AAXL,GAdgB;AA2B7Bd,EAAAA,eAAe,EAAE;AACbW,IAAAA,KAAK,EAAE,SADM;AAEbI,IAAAA,eAAe,EAAE,EAFJ;AAGbC,IAAAA,QAAQ,EAAE;AAHG,GA3BY;AAgC7B3B,EAAAA,UAAU,EAAE;AACRe,IAAAA,IAAI,EAAE,CADE;AAERO,IAAAA,KAAK,EAAE,OAFC;AAGRM,IAAAA,WAAW,EAAE,EAHL;AAIRC,IAAAA,YAAY,EAAE,EAJN;AAKRR,IAAAA,WAAW,EAAE,CALL;AAMRG,IAAAA,YAAY,EAAE,EANN;AAORD,IAAAA,WAAW,EAAE;AAPL,GAhCiB;AAyC7BX,EAAAA,iBAAiB,EAAE;AACfU,IAAAA,KAAK,EAAE,SADQ;AAEfQ,IAAAA,SAAS,EAAE,QAFI;AAGfC,IAAAA,UAAU,EAAE,MAHG;AAIfJ,IAAAA,QAAQ,EAAE;AAJK,GAzCU;AA+C7BlB,EAAAA,cAAc,EAAE;AACZa,IAAAA,KAAK,EAAE,KADK;AAEZQ,IAAAA,SAAS,EAAE,QAFC;AAGZH,IAAAA,QAAQ,EAAE;AAHE;AA/Ca,CAAlB,CAAf","sourcesContent":["import React, { useState } from 'react';\r\n\r\n//Import all required component\r\nimport {\r\n    StyleSheet,\r\n    TextInput,\r\n    View,\r\n    Text,\r\n    ScrollView,\r\n    Image,\r\n    Keyboard,\r\n    TouchableOpacity,\r\n    KeyboardAvoidingView,\r\n} from 'react-native';\r\nimport AsyncStorage from '@react-native-community/async-storage';\r\nimport Loader from './Components/loader';\r\n\r\nconst LoginScreen = props => {\r\n    let [userEmail, setUserEmail] = useState('');\r\n    let [userPassword, setUserPassword] = useState('');\r\n    let [loading, setLoading] = useState(false);\r\n    let [errortext, setErrortext] = useState('');\r\n\r\n    const handleSubmitPress = () => {\r\n        setErrortext('');\r\n        if (!userEmail) {\r\n            alert('Please fill Email');\r\n            return;\r\n        }\r\n        if (!userPassword) {\r\n            alert('Please fill Password');\r\n            return;\r\n        }\r\n        setLoading(true);\r\n        var dataToSend = { user_email: userEmail, user_password: userPassword };\r\n        var formBody = [];\r\n        for (var key in dataToSend) {\r\n            var encodedKey = encodeURIComponent(key);\r\n            var encodedValue = encodeURIComponent(dataToSend[key]);\r\n            formBody.push(encodedKey + '=' + encodedValue);\r\n        }\r\n        formBody = formBody.join('&');\r\n\r\n        fetch('https://aboutreact.herokuapp.com/login.php', {\r\n            method: 'POST',\r\n            body: formBody,\r\n            headers: {\r\n                //Header Defination\r\n                'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',\r\n            },\r\n        }).then(response => response.json())\r\n            .then(responseJson => {\r\n                //Hide Loader\r\n                setLoading(false);\r\n                console.log(responseJson);\r\n                // If server response message same as Data Matched\r\n                if (responseJson.status == 1) {\r\n                    AsyncStorage.setItem('user_id', responseJson.data[0].user_id);\r\n                    console.log(responseJson.data[0].user_id);\r\n                    props.navigation.navigate('DrawerNavigationRoutes');\r\n                } else {\r\n                    setErrortext('Please check your email id or password');\r\n                    console.log('Please check your email id or password');\r\n                }\r\n            })\r\n            .catch(error => {\r\n                //Hide Loader\r\n                setLoading(false);\r\n                console.error(error);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <View style={styles.mainBody}>\r\n            <Loader loading={loading} />\r\n            <ScrollView keyboardShouldPersistTaps=\"handled\">\r\n                <View style={{ marginTop: 100 }}>\r\n                    <KeyboardAvoidingView enabled>\r\n                        <View style={{ alignItems: 'center' }}>\r\n                            <Image\r\n                                source={require('../Image/aboutreact.png')}\r\n                                style={{\r\n                                    width: '50%',\r\n                                    height: 100,\r\n                                    resizeMode: 'contain',\r\n                                    margin: 30,\r\n                                }}\r\n                            />\r\n                        </View>\r\n                        <View style={styles.SectionStyle}>\r\n                            <TextInput\r\n                                style={styles.inputStyle}\r\n                                onChangeText={UserEmail => setUserEmail(UserEmail)}\r\n                                underlineColorAndroid=\"#FFFFFF\"\r\n                                placeholder=\"Enter Email\" //dummy@abc.com\r\n                                placeholderTextColor=\"#F6F6F7\"\r\n                                autoCapitalize=\"none\"\r\n                                keyboardType=\"email-address\"\r\n                                ref={ref => {\r\n                                    this._emailinput = ref;\r\n                                }}\r\n                                returnKeyType=\"next\"\r\n                                onSubmitEditing={() =>\r\n                                    this._passwordinput && this._passwordinput.focus()\r\n                                }\r\n                                blurOnSubmit={false}\r\n                            />\r\n                        </View>\r\n                        <View style={styles.SectionStyle}>\r\n                            <TextInput\r\n                                style={styles.inputStyle}\r\n                                onChangeText={UserPassword => setUserPassword(UserPassword)}\r\n                                underlineColorAndroid=\"#FFFFFF\"\r\n                                placeholder=\"Enter Password\" //12345\r\n                                placeholderTextColor=\"#F6F6F7\"\r\n                                keyboardType=\"default\"\r\n                                ref={ref => {\r\n                                    this._passwordinput = ref;\r\n                                }}\r\n                                onSubmitEditing={Keyboard.dismiss}\r\n                                blurOnSubmit={false}\r\n                                secureTextEntry={true}\r\n                            />\r\n                        </View>\r\n                        {errortext != '' ? (\r\n                            <Text style={styles.errorTextStyle}> {errortext} </Text>\r\n                        ) : null}\r\n                        <TouchableOpacity\r\n                            style={styles.buttonStyle}\r\n                            activeOpacity={0.5}\r\n                            onPress={handleSubmitPress}>\r\n                            <Text style={styles.buttonTextStyle}>LOGIN</Text>\r\n                        </TouchableOpacity>\r\n                        <Text\r\n                            style={styles.registerTextStyle}\r\n                            onPress={() => props.navigation.navigate('RegisterScreen')}>\r\n                            New Here ? Register\r\n                        </Text>\r\n                    </KeyboardAvoidingView>\r\n                </View>\r\n            </ScrollView>\r\n        </View>\r\n    );\r\n};\r\nexport default LoginScreen;\r\n\r\nconst styles = StyleSheet.create({\r\n    mainBody: {\r\n        flex: 1,\r\n        justifyContent: 'center',\r\n        backgroundColor: '#307ecc',\r\n    },\r\n    SectionStyle: {\r\n        flexDirection: 'row',\r\n        height: 40,\r\n        marginTop: 20,\r\n        marginLeft: 35,\r\n        marginRight: 35,\r\n        margin: 10,\r\n    },\r\n    buttonStyle: {\r\n        backgroundColor: '#7DE24E',\r\n        borderWidth: 0,\r\n        color: '#FFFFFF',\r\n        borderColor: '#7DE24E',\r\n        height: 40,\r\n        alignItems: 'center',\r\n        borderRadius: 30,\r\n        marginLeft: 35,\r\n        marginRight: 35,\r\n        marginTop: 20,\r\n        marginBottom: 20,\r\n    },\r\n    buttonTextStyle: {\r\n        color: '#FFFFFF',\r\n        paddingVertical: 10,\r\n        fontSize: 16,\r\n    },\r\n    inputStyle: {\r\n        flex: 1,\r\n        color: 'white',\r\n        paddingLeft: 15,\r\n        paddingRight: 15,\r\n        borderWidth: 1,\r\n        borderRadius: 30,\r\n        borderColor: 'white',\r\n    },\r\n    registerTextStyle: {\r\n        color: '#FFFFFF',\r\n        textAlign: 'center',\r\n        fontWeight: 'bold',\r\n        fontSize: 14,\r\n    },\r\n    errorTextStyle: {\r\n        color: 'red',\r\n        textAlign: 'center',\r\n        fontSize: 14,\r\n    },\r\n});"]},"metadata":{},"sourceType":"module"}